<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="1591"><g><title>libsystem_malloc.dylib`_free (27 samples, 1.70%)</title><rect x="0.0000%" y="373" width="1.6970%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="27"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (43 samples, 2.70%)</title><rect x="1.6970%" y="373" width="2.7027%" height="15" fill="rgb(217,0,24)" fg:x="27" fg:w="43"/><text x="1.9470%" y="383.50">li..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (17 samples, 1.07%)</title><rect x="4.3997%" y="373" width="1.0685%" height="15" fill="rgb(221,193,54)" fg:x="70" fg:w="17"/><text x="4.6497%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.19%)</title><rect x="5.4683%" y="373" width="0.1886%" height="15" fill="rgb(248,212,6)" fg:x="87" fg:w="3"/><text x="5.7183%" y="383.50"></text></g><g><title>spreadsheet`&lt;std::io::stdio::Stdout as std::io::Write&gt;::flush (5 samples, 0.31%)</title><rect x="5.6568%" y="373" width="0.3143%" height="15" fill="rgb(208,68,35)" fg:x="90" fg:w="5"/><text x="5.9068%" y="383.50"></text></g><g><title>spreadsheet`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::flush (5 samples, 0.31%)</title><rect x="5.6568%" y="357" width="0.3143%" height="15" fill="rgb(232,128,0)" fg:x="90" fg:w="5"/><text x="5.9068%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`write (5 samples, 0.31%)</title><rect x="5.6568%" y="341" width="0.3143%" height="15" fill="rgb(207,160,47)" fg:x="90" fg:w="5"/><text x="5.9068%" y="351.50"></text></g><g><title>spreadsheet`DYLD-STUB$$free (6 samples, 0.38%)</title><rect x="5.9711%" y="373" width="0.3771%" height="15" fill="rgb(228,23,34)" fg:x="95" fg:w="6"/><text x="6.2211%" y="383.50"></text></g><g><title>spreadsheet`DYLD-STUB$$malloc (5 samples, 0.31%)</title><rect x="6.3482%" y="373" width="0.3143%" height="15" fill="rgb(218,30,26)" fg:x="101" fg:w="5"/><text x="6.5982%" y="383.50"></text></g><g><title>spreadsheet`__rdl_alloc (17 samples, 1.07%)</title><rect x="6.6625%" y="373" width="1.0685%" height="15" fill="rgb(220,122,19)" fg:x="106" fg:w="17"/><text x="6.9125%" y="383.50"></text></g><g><title>spreadsheet`__rdl_dealloc (2 samples, 0.13%)</title><rect x="7.7310%" y="373" width="0.1257%" height="15" fill="rgb(250,228,42)" fg:x="123" fg:w="2"/><text x="7.9810%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.06%)</title><rect x="7.9195%" y="325" width="0.0629%" height="15" fill="rgb(240,193,28)" fg:x="126" fg:w="1"/><text x="8.1695%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="7.9824%" y="325" width="0.0629%" height="15" fill="rgb(216,20,37)" fg:x="127" fg:w="1"/><text x="8.2324%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="7.9824%" y="309" width="0.0629%" height="15" fill="rgb(206,188,39)" fg:x="127" fg:w="1"/><text x="8.2324%" y="319.50"></text></g><g><title>spreadsheet`core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.19%)</title><rect x="7.9195%" y="357" width="0.1886%" height="15" fill="rgb(217,207,13)" fg:x="126" fg:w="3"/><text x="8.1695%" y="367.50"></text></g><g><title>spreadsheet`core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Send+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.19%)</title><rect x="7.9195%" y="341" width="0.1886%" height="15" fill="rgb(231,73,38)" fg:x="126" fg:w="3"/><text x="8.1695%" y="351.50"></text></g><g><title>spreadsheet`core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.06%)</title><rect x="8.0453%" y="325" width="0.0629%" height="15" fill="rgb(225,20,46)" fg:x="128" fg:w="1"/><text x="8.2953%" y="335.50"></text></g><g><title>spreadsheet`DYLD-STUB$$free (1 samples, 0.06%)</title><rect x="8.0453%" y="309" width="0.0629%" height="15" fill="rgb(210,31,41)" fg:x="128" fg:w="1"/><text x="8.2953%" y="319.50"></text></g><g><title>spreadsheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.06%)</title><rect x="8.1081%" y="277" width="0.0629%" height="15" fill="rgb(221,200,47)" fg:x="129" fg:w="1"/><text x="8.3581%" y="287.50"></text></g><g><title>spreadsheet`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="8.1081%" y="261" width="0.0629%" height="15" fill="rgb(226,26,5)" fg:x="129" fg:w="1"/><text x="8.3581%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.06%)</title><rect x="8.1081%" y="245" width="0.0629%" height="15" fill="rgb(249,33,26)" fg:x="129" fg:w="1"/><text x="8.3581%" y="255.50"></text></g><g><title>spreadsheet`regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.13%)</title><rect x="8.1081%" y="293" width="0.1257%" height="15" fill="rgb(235,183,28)" fg:x="129" fg:w="2"/><text x="8.3581%" y="303.50"></text></g><g><title>spreadsheet`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="8.1710%" y="277" width="0.0629%" height="15" fill="rgb(221,5,38)" fg:x="130" fg:w="1"/><text x="8.4210%" y="287.50"></text></g><g><title>spreadsheet`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="8.1710%" y="261" width="0.0629%" height="15" fill="rgb(247,18,42)" fg:x="130" fg:w="1"/><text x="8.4210%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.06%)</title><rect x="8.1710%" y="245" width="0.0629%" height="15" fill="rgb(241,131,45)" fg:x="130" fg:w="1"/><text x="8.4210%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.06%)</title><rect x="8.1710%" y="229" width="0.0629%" height="15" fill="rgb(249,31,29)" fg:x="130" fg:w="1"/><text x="8.4210%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.06%)</title><rect x="8.1710%" y="213" width="0.0629%" height="15" fill="rgb(225,111,53)" fg:x="130" fg:w="1"/><text x="8.4210%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="8.1710%" y="197" width="0.0629%" height="15" fill="rgb(238,160,17)" fg:x="130" fg:w="1"/><text x="8.4210%" y="207.50"></text></g><g><title>spreadsheet`regex::regex::string::Regex::captures_at (3 samples, 0.19%)</title><rect x="8.1081%" y="357" width="0.1886%" height="15" fill="rgb(214,148,48)" fg:x="129" fg:w="3"/><text x="8.3581%" y="367.50"></text></g><g><title>spreadsheet`regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.19%)</title><rect x="8.1081%" y="341" width="0.1886%" height="15" fill="rgb(232,36,49)" fg:x="129" fg:w="3"/><text x="8.3581%" y="351.50"></text></g><g><title>spreadsheet`&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.19%)</title><rect x="8.1081%" y="325" width="0.1886%" height="15" fill="rgb(209,103,24)" fg:x="129" fg:w="3"/><text x="8.3581%" y="335.50"></text></g><g><title>spreadsheet`regex_automata::hybrid::dfa::Cache::new (3 samples, 0.19%)</title><rect x="8.1081%" y="309" width="0.1886%" height="15" fill="rgb(229,88,8)" fg:x="129" fg:w="3"/><text x="8.3581%" y="319.50"></text></g><g><title>spreadsheet`regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.06%)</title><rect x="8.2338%" y="293" width="0.0629%" height="15" fill="rgb(213,181,19)" fg:x="131" fg:w="1"/><text x="8.4838%" y="303.50"></text></g><g><title>spreadsheet`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="8.2338%" y="277" width="0.0629%" height="15" fill="rgb(254,191,54)" fg:x="131" fg:w="1"/><text x="8.4838%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="8.2338%" y="261" width="0.0629%" height="15" fill="rgb(241,83,37)" fg:x="131" fg:w="1"/><text x="8.4838%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="8.2967%" y="277" width="0.0629%" height="15" fill="rgb(233,36,39)" fg:x="132" fg:w="1"/><text x="8.5467%" y="287.50"></text></g><g><title>spreadsheet`&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="8.3595%" y="261" width="0.0629%" height="15" fill="rgb(226,3,54)" fg:x="133" fg:w="1"/><text x="8.6095%" y="271.50"></text></g><g><title>spreadsheet`core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.19%)</title><rect x="8.2967%" y="309" width="0.1886%" height="15" fill="rgb(245,192,40)" fg:x="132" fg:w="3"/><text x="8.5467%" y="319.50"></text></g><g><title>spreadsheet`&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.19%)</title><rect x="8.2967%" y="293" width="0.1886%" height="15" fill="rgb(238,167,29)" fg:x="132" fg:w="3"/><text x="8.5467%" y="303.50"></text></g><g><title>spreadsheet`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::ast::ClassBracketed&gt;&gt; (2 samples, 0.13%)</title><rect x="8.3595%" y="277" width="0.1257%" height="15" fill="rgb(232,182,51)" fg:x="133" fg:w="2"/><text x="8.6095%" y="287.50"></text></g><g><title>spreadsheet`DYLD-STUB$$malloc (1 samples, 0.06%)</title><rect x="8.4224%" y="261" width="0.0629%" height="15" fill="rgb(231,60,39)" fg:x="134" fg:w="1"/><text x="8.6724%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.06%)</title><rect x="8.4852%" y="293" width="0.0629%" height="15" fill="rgb(208,69,12)" fg:x="135" fg:w="1"/><text x="8.7352%" y="303.50"></text></g><g><title>spreadsheet`core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.31%)</title><rect x="8.5481%" y="293" width="0.3143%" height="15" fill="rgb(235,93,37)" fg:x="136" fg:w="5"/><text x="8.7981%" y="303.50"></text></g><g><title>spreadsheet`core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.25%)</title><rect x="8.6109%" y="277" width="0.2514%" height="15" fill="rgb(213,116,39)" fg:x="137" fg:w="4"/><text x="8.8609%" y="287.50"></text></g><g><title>spreadsheet`regex_automata::meta::wrappers::OnePass::new (2 samples, 0.13%)</title><rect x="8.8624%" y="293" width="0.1257%" height="15" fill="rgb(222,207,29)" fg:x="141" fg:w="2"/><text x="9.1124%" y="303.50"></text></g><g><title>spreadsheet`regex_automata::dfa::onepass::Builder::build_from_nfa (2 samples, 0.13%)</title><rect x="8.8624%" y="277" width="0.1257%" height="15" fill="rgb(206,96,30)" fg:x="141" fg:w="2"/><text x="9.1124%" y="287.50"></text></g><g><title>spreadsheet`regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.13%)</title><rect x="8.8624%" y="261" width="0.1257%" height="15" fill="rgb(218,138,4)" fg:x="141" fg:w="2"/><text x="9.1124%" y="271.50"></text></g><g><title>spreadsheet`regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.06%)</title><rect x="8.9252%" y="245" width="0.0629%" height="15" fill="rgb(250,191,14)" fg:x="142" fg:w="1"/><text x="9.1752%" y="255.50"></text></g><g><title>spreadsheet`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="8.9252%" y="229" width="0.0629%" height="15" fill="rgb(239,60,40)" fg:x="142" fg:w="1"/><text x="9.1752%" y="239.50"></text></g><g><title>spreadsheet`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="8.9252%" y="213" width="0.0629%" height="15" fill="rgb(206,27,48)" fg:x="142" fg:w="1"/><text x="9.1752%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.06%)</title><rect x="8.9252%" y="197" width="0.0629%" height="15" fill="rgb(225,35,8)" fg:x="142" fg:w="1"/><text x="9.1752%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.06%)</title><rect x="8.9252%" y="181" width="0.0629%" height="15" fill="rgb(250,213,24)" fg:x="142" fg:w="1"/><text x="9.1752%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.06%)</title><rect x="8.9252%" y="165" width="0.0629%" height="15" fill="rgb(247,123,22)" fg:x="142" fg:w="1"/><text x="9.1752%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="8.9252%" y="149" width="0.0629%" height="15" fill="rgb(231,138,38)" fg:x="142" fg:w="1"/><text x="9.1752%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.06%)</title><rect x="8.9252%" y="133" width="0.0629%" height="15" fill="rgb(231,145,46)" fg:x="142" fg:w="1"/><text x="9.1752%" y="143.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.06%)</title><rect x="8.9881%" y="213" width="0.0629%" height="15" fill="rgb(251,118,11)" fg:x="143" fg:w="1"/><text x="9.2381%" y="223.50"></text></g><g><title>spreadsheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.06%)</title><rect x="8.9881%" y="197" width="0.0629%" height="15" fill="rgb(217,147,25)" fg:x="143" fg:w="1"/><text x="9.2381%" y="207.50"></text></g><g><title>spreadsheet`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="8.9881%" y="181" width="0.0629%" height="15" fill="rgb(247,81,37)" fg:x="143" fg:w="1"/><text x="9.2381%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.06%)</title><rect x="8.9881%" y="165" width="0.0629%" height="15" fill="rgb(209,12,38)" fg:x="143" fg:w="1"/><text x="9.2381%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.06%)</title><rect x="8.9881%" y="149" width="0.0629%" height="15" fill="rgb(227,1,9)" fg:x="143" fg:w="1"/><text x="9.2381%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.06%)</title><rect x="8.9881%" y="133" width="0.0629%" height="15" fill="rgb(248,47,43)" fg:x="143" fg:w="1"/><text x="9.2381%" y="143.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.13%)</title><rect x="8.9881%" y="245" width="0.1257%" height="15" fill="rgb(221,10,30)" fg:x="143" fg:w="2"/><text x="9.2381%" y="255.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (2 samples, 0.13%)</title><rect x="8.9881%" y="229" width="0.1257%" height="15" fill="rgb(210,229,1)" fg:x="143" fg:w="2"/><text x="9.2381%" y="239.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.06%)</title><rect x="9.0509%" y="213" width="0.0629%" height="15" fill="rgb(222,148,37)" fg:x="144" fg:w="1"/><text x="9.3009%" y="223.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.06%)</title><rect x="9.0509%" y="197" width="0.0629%" height="15" fill="rgb(234,67,33)" fg:x="144" fg:w="1"/><text x="9.3009%" y="207.50"></text></g><g><title>spreadsheet`regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.06%)</title><rect x="9.0509%" y="181" width="0.0629%" height="15" fill="rgb(247,98,35)" fg:x="144" fg:w="1"/><text x="9.3009%" y="191.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.19%)</title><rect x="8.9881%" y="261" width="0.1886%" height="15" fill="rgb(247,138,52)" fg:x="143" fg:w="3"/><text x="9.2381%" y="271.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.06%)</title><rect x="9.1138%" y="245" width="0.0629%" height="15" fill="rgb(213,79,30)" fg:x="145" fg:w="1"/><text x="9.3638%" y="255.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.06%)</title><rect x="9.1138%" y="229" width="0.0629%" height="15" fill="rgb(246,177,23)" fg:x="145" fg:w="1"/><text x="9.3638%" y="239.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.06%)</title><rect x="9.1138%" y="213" width="0.0629%" height="15" fill="rgb(230,62,27)" fg:x="145" fg:w="1"/><text x="9.3638%" y="223.50"></text></g><g><title>spreadsheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.06%)</title><rect x="9.1138%" y="197" width="0.0629%" height="15" fill="rgb(216,154,8)" fg:x="145" fg:w="1"/><text x="9.3638%" y="207.50"></text></g><g><title>spreadsheet`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="9.1138%" y="181" width="0.0629%" height="15" fill="rgb(244,35,45)" fg:x="145" fg:w="1"/><text x="9.3638%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.06%)</title><rect x="9.1138%" y="165" width="0.0629%" height="15" fill="rgb(251,115,12)" fg:x="145" fg:w="1"/><text x="9.3638%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.06%)</title><rect x="9.1138%" y="149" width="0.0629%" height="15" fill="rgb(240,54,50)" fg:x="145" fg:w="1"/><text x="9.3638%" y="159.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.06%)</title><rect x="9.1766%" y="133" width="0.0629%" height="15" fill="rgb(233,84,52)" fg:x="146" fg:w="1"/><text x="9.4266%" y="143.50"></text></g><g><title>spreadsheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.06%)</title><rect x="9.1766%" y="117" width="0.0629%" height="15" fill="rgb(207,117,47)" fg:x="146" fg:w="1"/><text x="9.4266%" y="127.50"></text></g><g><title>spreadsheet`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="9.1766%" y="101" width="0.0629%" height="15" fill="rgb(249,43,39)" fg:x="146" fg:w="1"/><text x="9.4266%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.06%)</title><rect x="9.1766%" y="85" width="0.0629%" height="15" fill="rgb(209,38,44)" fg:x="146" fg:w="1"/><text x="9.4266%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.06%)</title><rect x="9.1766%" y="69" width="0.0629%" height="15" fill="rgb(236,212,23)" fg:x="146" fg:w="1"/><text x="9.4266%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.06%)</title><rect x="9.1766%" y="53" width="0.0629%" height="15" fill="rgb(242,79,21)" fg:x="146" fg:w="1"/><text x="9.4266%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.06%)</title><rect x="9.1766%" y="37" width="0.0629%" height="15" fill="rgb(211,96,35)" fg:x="146" fg:w="1"/><text x="9.4266%" y="47.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.06%)</title><rect x="9.2395%" y="133" width="0.0629%" height="15" fill="rgb(253,215,40)" fg:x="147" fg:w="1"/><text x="9.4895%" y="143.50"></text></g><g><title>spreadsheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.06%)</title><rect x="9.2395%" y="117" width="0.0629%" height="15" fill="rgb(211,81,21)" fg:x="147" fg:w="1"/><text x="9.4895%" y="127.50"></text></g><g><title>spreadsheet`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="9.2395%" y="101" width="0.0629%" height="15" fill="rgb(208,190,38)" fg:x="147" fg:w="1"/><text x="9.4895%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.06%)</title><rect x="9.2395%" y="85" width="0.0629%" height="15" fill="rgb(235,213,38)" fg:x="147" fg:w="1"/><text x="9.4895%" y="95.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.19%)</title><rect x="9.1766%" y="213" width="0.1886%" height="15" fill="rgb(237,122,38)" fg:x="146" fg:w="3"/><text x="9.4266%" y="223.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (3 samples, 0.19%)</title><rect x="9.1766%" y="197" width="0.1886%" height="15" fill="rgb(244,218,35)" fg:x="146" fg:w="3"/><text x="9.4266%" y="207.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.19%)</title><rect x="9.1766%" y="181" width="0.1886%" height="15" fill="rgb(240,68,47)" fg:x="146" fg:w="3"/><text x="9.4266%" y="191.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.19%)</title><rect x="9.1766%" y="165" width="0.1886%" height="15" fill="rgb(210,16,53)" fg:x="146" fg:w="3"/><text x="9.4266%" y="175.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.19%)</title><rect x="9.1766%" y="149" width="0.1886%" height="15" fill="rgb(235,124,12)" fg:x="146" fg:w="3"/><text x="9.4266%" y="159.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.06%)</title><rect x="9.3023%" y="133" width="0.0629%" height="15" fill="rgb(224,169,11)" fg:x="148" fg:w="1"/><text x="9.5523%" y="143.50"></text></g><g><title>spreadsheet`&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="9.4280%" y="181" width="0.0629%" height="15" fill="rgb(250,166,2)" fg:x="150" fg:w="1"/><text x="9.6780%" y="191.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.06%)</title><rect x="9.4909%" y="181" width="0.0629%" height="15" fill="rgb(242,216,29)" fg:x="151" fg:w="1"/><text x="9.7409%" y="191.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.06%)</title><rect x="9.4909%" y="165" width="0.0629%" height="15" fill="rgb(230,116,27)" fg:x="151" fg:w="1"/><text x="9.7409%" y="175.50"></text></g><g><title>spreadsheet`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="9.4909%" y="149" width="0.0629%" height="15" fill="rgb(228,99,48)" fg:x="151" fg:w="1"/><text x="9.7409%" y="159.50"></text></g><g><title>spreadsheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.06%)</title><rect x="9.5537%" y="165" width="0.0629%" height="15" fill="rgb(253,11,6)" fg:x="152" fg:w="1"/><text x="9.8037%" y="175.50"></text></g><g><title>spreadsheet`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="9.5537%" y="149" width="0.0629%" height="15" fill="rgb(247,143,39)" fg:x="152" fg:w="1"/><text x="9.8037%" y="159.50"></text></g><g><title>spreadsheet`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.88%)</title><rect x="8.9881%" y="277" width="0.8799%" height="15" fill="rgb(236,97,10)" fg:x="143" fg:w="14"/><text x="9.2381%" y="287.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c_cap (11 samples, 0.69%)</title><rect x="9.1766%" y="261" width="0.6914%" height="15" fill="rgb(233,208,19)" fg:x="146" fg:w="11"/><text x="9.4266%" y="271.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c (11 samples, 0.69%)</title><rect x="9.1766%" y="245" width="0.6914%" height="15" fill="rgb(216,164,2)" fg:x="146" fg:w="11"/><text x="9.4266%" y="255.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c_cap (11 samples, 0.69%)</title><rect x="9.1766%" y="229" width="0.6914%" height="15" fill="rgb(220,129,5)" fg:x="146" fg:w="11"/><text x="9.4266%" y="239.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c_at_least (8 samples, 0.50%)</title><rect x="9.3652%" y="213" width="0.5028%" height="15" fill="rgb(242,17,10)" fg:x="149" fg:w="8"/><text x="9.6152%" y="223.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::c (8 samples, 0.50%)</title><rect x="9.3652%" y="197" width="0.5028%" height="15" fill="rgb(242,107,0)" fg:x="149" fg:w="8"/><text x="9.6152%" y="207.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Utf8Compiler::new (5 samples, 0.31%)</title><rect x="9.5537%" y="181" width="0.3143%" height="15" fill="rgb(251,28,31)" fg:x="152" fg:w="5"/><text x="9.8037%" y="191.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (4 samples, 0.25%)</title><rect x="9.6166%" y="165" width="0.2514%" height="15" fill="rgb(233,223,10)" fg:x="153" fg:w="4"/><text x="9.8666%" y="175.50"></text></g><g><title>spreadsheet`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (4 samples, 0.25%)</title><rect x="9.6166%" y="149" width="0.2514%" height="15" fill="rgb(215,21,27)" fg:x="153" fg:w="4"/><text x="9.8666%" y="159.50"></text></g><g><title>spreadsheet`alloc::vec::Vec&lt;T,A&gt;::extend_with (4 samples, 0.25%)</title><rect x="9.6166%" y="133" width="0.2514%" height="15" fill="rgb(232,23,21)" fg:x="153" fg:w="4"/><text x="9.8666%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.06%)</title><rect x="9.9937%" y="181" width="0.0629%" height="15" fill="rgb(244,5,23)" fg:x="159" fg:w="1"/><text x="10.2437%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="9.9937%" y="165" width="0.0629%" height="15" fill="rgb(226,81,46)" fg:x="159" fg:w="1"/><text x="10.2437%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="9.9937%" y="149" width="0.0629%" height="15" fill="rgb(247,70,30)" fg:x="159" fg:w="1"/><text x="10.2437%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="9.9937%" y="133" width="0.0629%" height="15" fill="rgb(212,68,19)" fg:x="159" fg:w="1"/><text x="10.2437%" y="143.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.19%)</title><rect x="9.9309%" y="261" width="0.1886%" height="15" fill="rgb(240,187,13)" fg:x="158" fg:w="3"/><text x="10.1809%" y="271.50"></text></g><g><title>spreadsheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.13%)</title><rect x="9.9937%" y="245" width="0.1257%" height="15" fill="rgb(223,113,26)" fg:x="159" fg:w="2"/><text x="10.2437%" y="255.50"></text></g><g><title>spreadsheet`alloc::raw_vec::finish_grow (2 samples, 0.13%)</title><rect x="9.9937%" y="229" width="0.1257%" height="15" fill="rgb(206,192,2)" fg:x="159" fg:w="2"/><text x="10.2437%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.13%)</title><rect x="9.9937%" y="213" width="0.1257%" height="15" fill="rgb(241,108,4)" fg:x="159" fg:w="2"/><text x="10.2437%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.13%)</title><rect x="9.9937%" y="197" width="0.1257%" height="15" fill="rgb(247,173,49)" fg:x="159" fg:w="2"/><text x="10.2437%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.06%)</title><rect x="10.0566%" y="181" width="0.0629%" height="15" fill="rgb(224,114,35)" fg:x="160" fg:w="1"/><text x="10.3066%" y="191.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.19%)</title><rect x="10.1194%" y="261" width="0.1886%" height="15" fill="rgb(245,159,27)" fg:x="161" fg:w="3"/><text x="10.3694%" y="271.50"></text></g><g><title>spreadsheet`regex_automata::meta::strategy::new (30 samples, 1.89%)</title><rect x="8.4852%" y="309" width="1.8856%" height="15" fill="rgb(245,172,44)" fg:x="135" fg:w="30"/><text x="8.7352%" y="319.50">s..</text></g><g><title>spreadsheet`regex_automata::nfa::thompson::compiler::Compiler::compile (22 samples, 1.38%)</title><rect x="8.9881%" y="293" width="1.3828%" height="15" fill="rgb(236,23,11)" fg:x="143" fg:w="22"/><text x="9.2381%" y="303.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.50%)</title><rect x="9.8680%" y="277" width="0.5028%" height="15" fill="rgb(205,117,38)" fg:x="157" fg:w="8"/><text x="10.1180%" y="287.50"></text></g><g><title>spreadsheet`regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.06%)</title><rect x="10.3080%" y="261" width="0.0629%" height="15" fill="rgb(237,72,25)" fg:x="164" fg:w="1"/><text x="10.5580%" y="271.50"></text></g><g><title>spreadsheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.06%)</title><rect x="10.3708%" y="293" width="0.0629%" height="15" fill="rgb(244,70,9)" fg:x="165" fg:w="1"/><text x="10.6208%" y="303.50"></text></g><g><title>spreadsheet`regex_syntax::ast::ClassSetUnion::push (1 samples, 0.06%)</title><rect x="10.4965%" y="261" width="0.0629%" height="15" fill="rgb(217,125,39)" fg:x="167" fg:w="1"/><text x="10.7465%" y="271.50"></text></g><g><title>spreadsheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.06%)</title><rect x="10.4965%" y="245" width="0.0629%" height="15" fill="rgb(235,36,10)" fg:x="167" fg:w="1"/><text x="10.7465%" y="255.50"></text></g><g><title>spreadsheet`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="10.4965%" y="229" width="0.0629%" height="15" fill="rgb(251,123,47)" fg:x="167" fg:w="1"/><text x="10.7465%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="10.4965%" y="213" width="0.0629%" height="15" fill="rgb(221,13,13)" fg:x="167" fg:w="1"/><text x="10.7465%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="10.4965%" y="197" width="0.0629%" height="15" fill="rgb(238,131,9)" fg:x="167" fg:w="1"/><text x="10.7465%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="10.4965%" y="181" width="0.0629%" height="15" fill="rgb(211,50,8)" fg:x="167" fg:w="1"/><text x="10.7465%" y="191.50"></text></g><g><title>spreadsheet`regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.06%)</title><rect x="10.5594%" y="261" width="0.0629%" height="15" fill="rgb(245,182,24)" fg:x="168" fg:w="1"/><text x="10.8094%" y="271.50"></text></g><g><title>spreadsheet`regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.06%)</title><rect x="10.5594%" y="245" width="0.0629%" height="15" fill="rgb(242,14,37)" fg:x="168" fg:w="1"/><text x="10.8094%" y="255.50"></text></g><g><title>spreadsheet`regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.06%)</title><rect x="10.5594%" y="229" width="0.0629%" height="15" fill="rgb(246,228,12)" fg:x="168" fg:w="1"/><text x="10.8094%" y="239.50"></text></g><g><title>spreadsheet`regex_syntax::ast::parse::ParserI&lt;P&gt;::char (1 samples, 0.06%)</title><rect x="10.5594%" y="213" width="0.0629%" height="15" fill="rgb(213,55,15)" fg:x="168" fg:w="1"/><text x="10.8094%" y="223.50"></text></g><g><title>spreadsheet`regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.25%)</title><rect x="10.4337%" y="277" width="0.2514%" height="15" fill="rgb(209,9,3)" fg:x="166" fg:w="4"/><text x="10.6837%" y="287.50"></text></g><g><title>spreadsheet`regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.06%)</title><rect x="10.6223%" y="261" width="0.0629%" height="15" fill="rgb(230,59,30)" fg:x="169" fg:w="1"/><text x="10.8723%" y="271.50"></text></g><g><title>spreadsheet`regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.06%)</title><rect x="10.6851%" y="277" width="0.0629%" height="15" fill="rgb(209,121,21)" fg:x="170" fg:w="1"/><text x="10.9351%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="10.6851%" y="261" width="0.0629%" height="15" fill="rgb(220,109,13)" fg:x="170" fg:w="1"/><text x="10.9351%" y="271.50"></text></g><g><title>spreadsheet`regex_syntax::ast::parse::Parser::parse (8 samples, 0.50%)</title><rect x="10.3708%" y="309" width="0.5028%" height="15" fill="rgb(232,18,1)" fg:x="165" fg:w="8"/><text x="10.6208%" y="319.50"></text></g><g><title>spreadsheet`regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.44%)</title><rect x="10.4337%" y="293" width="0.4400%" height="15" fill="rgb(215,41,42)" fg:x="166" fg:w="7"/><text x="10.6837%" y="303.50"></text></g><g><title>spreadsheet`regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.13%)</title><rect x="10.7480%" y="277" width="0.1257%" height="15" fill="rgb(224,123,36)" fg:x="171" fg:w="2"/><text x="10.9980%" y="287.50"></text></g><g><title>spreadsheet`__rdl_alloc (1 samples, 0.06%)</title><rect x="10.8108%" y="261" width="0.0629%" height="15" fill="rgb(240,125,3)" fg:x="172" fg:w="1"/><text x="11.0608%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.06%)</title><rect x="10.8737%" y="293" width="0.0629%" height="15" fill="rgb(205,98,50)" fg:x="173" fg:w="1"/><text x="11.1237%" y="303.50"></text></g><g><title>spreadsheet`&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.06%)</title><rect x="10.9365%" y="293" width="0.0629%" height="15" fill="rgb(205,185,37)" fg:x="174" fg:w="1"/><text x="11.1865%" y="303.50"></text></g><g><title>spreadsheet`&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.06%)</title><rect x="10.9994%" y="277" width="0.0629%" height="15" fill="rgb(238,207,15)" fg:x="175" fg:w="1"/><text x="11.2494%" y="287.50"></text></g><g><title>spreadsheet`regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.06%)</title><rect x="10.9994%" y="261" width="0.0629%" height="15" fill="rgb(213,199,42)" fg:x="175" fg:w="1"/><text x="11.2494%" y="271.50"></text></g><g><title>spreadsheet`cop::spreadsheet::Spreadsheet::is_valid_command (52 samples, 3.27%)</title><rect x="7.8567%" y="373" width="3.2684%" height="15" fill="rgb(235,201,11)" fg:x="125" fg:w="52"/><text x="8.1067%" y="383.50">spr..</text></g><g><title>spreadsheet`regex::regex::string::Regex::new (45 samples, 2.83%)</title><rect x="8.2967%" y="357" width="2.8284%" height="15" fill="rgb(207,46,11)" fg:x="132" fg:w="45"/><text x="8.5467%" y="367.50">sp..</text></g><g><title>spreadsheet`regex::builders::Builder::build_one_string (45 samples, 2.83%)</title><rect x="8.2967%" y="341" width="2.8284%" height="15" fill="rgb(241,35,35)" fg:x="132" fg:w="45"/><text x="8.5467%" y="351.50">sp..</text></g><g><title>spreadsheet`regex_automata::meta::regex::Builder::build (45 samples, 2.83%)</title><rect x="8.2967%" y="325" width="2.8284%" height="15" fill="rgb(243,32,47)" fg:x="132" fg:w="45"/><text x="8.5467%" y="335.50">sp..</text></g><g><title>spreadsheet`regex_syntax::hir::translate::Translator::translate (4 samples, 0.25%)</title><rect x="10.8737%" y="309" width="0.2514%" height="15" fill="rgb(247,202,23)" fg:x="173" fg:w="4"/><text x="11.1237%" y="319.50"></text></g><g><title>spreadsheet`regex_syntax::ast::visitor::visit (2 samples, 0.13%)</title><rect x="10.9994%" y="293" width="0.1257%" height="15" fill="rgb(219,102,11)" fg:x="175" fg:w="2"/><text x="11.2494%" y="303.50"></text></g><g><title>spreadsheet`&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.06%)</title><rect x="11.0622%" y="277" width="0.0629%" height="15" fill="rgb(243,110,44)" fg:x="176" fg:w="1"/><text x="11.3122%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.06%)</title><rect x="17.3476%" y="357" width="0.0629%" height="15" fill="rgb(222,74,54)" fg:x="276" fg:w="1"/><text x="17.5976%" y="367.50"></text></g><g><title>spreadsheet`cop::spreadsheet::Spreadsheet::spreadsheet_create (532 samples, 33.44%)</title><rect x="11.1251%" y="373" width="33.4381%" height="15" fill="rgb(216,99,12)" fg:x="177" fg:w="532"/><text x="11.3751%" y="383.50">spreadsheet`cop::spreadsheet::Spreadsheet::spreadsheet..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (432 samples, 27.15%)</title><rect x="17.4104%" y="357" width="27.1527%" height="15" fill="rgb(226,22,26)" fg:x="277" fg:w="432"/><text x="17.6604%" y="367.50">libsystem_malloc.dylib`nanov2_malloc_type</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (379 samples, 23.82%)</title><rect x="20.7417%" y="341" width="23.8215%" height="15" fill="rgb(217,163,10)" fg:x="330" fg:w="379"/><text x="20.9917%" y="351.50">libsystem_malloc.dylib`nanov2_allocate..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (234 samples, 14.71%)</title><rect x="29.8554%" y="325" width="14.7077%" height="15" fill="rgb(213,25,53)" fg:x="475" fg:w="234"/><text x="30.1054%" y="335.50">libsystem_malloc.dylib..</text></g><g><title>spreadsheet`cop::spreadsheet::Spreadsheet::spreadsheet_set_cell_value (1 samples, 0.06%)</title><rect x="44.5632%" y="373" width="0.0629%" height="15" fill="rgb(252,105,26)" fg:x="709" fg:w="1"/><text x="44.8132%" y="383.50"></text></g><g><title>spreadsheet`cop::spreadsheet::Spreadsheet::first_step_find_cycle (1 samples, 0.06%)</title><rect x="44.5632%" y="357" width="0.0629%" height="15" fill="rgb(220,39,43)" fg:x="709" fg:w="1"/><text x="44.8132%" y="367.50"></text></g><g><title>spreadsheet`cop::spreadsheet::Spreadsheet::rec_find_cycle_using_stack (1 samples, 0.06%)</title><rect x="44.5632%" y="341" width="0.0629%" height="15" fill="rgb(229,68,48)" fg:x="709" fg:w="1"/><text x="44.8132%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (7 samples, 0.44%)</title><rect x="46.1974%" y="357" width="0.4400%" height="15" fill="rgb(252,8,32)" fg:x="735" fg:w="7"/><text x="46.4474%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (91 samples, 5.72%)</title><rect x="46.6373%" y="357" width="5.7197%" height="15" fill="rgb(223,20,43)" fg:x="742" fg:w="91"/><text x="46.8873%" y="367.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.25%)</title><rect x="52.3570%" y="357" width="0.2514%" height="15" fill="rgb(229,81,49)" fg:x="833" fg:w="4"/><text x="52.6070%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.25%)</title><rect x="52.3570%" y="341" width="0.2514%" height="15" fill="rgb(236,28,36)" fg:x="833" fg:w="4"/><text x="52.6070%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (4 samples, 0.25%)</title><rect x="52.3570%" y="325" width="0.2514%" height="15" fill="rgb(249,185,26)" fg:x="833" fg:w="4"/><text x="52.6070%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.25%)</title><rect x="52.3570%" y="309" width="0.2514%" height="15" fill="rgb(249,174,33)" fg:x="833" fg:w="4"/><text x="52.6070%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (191 samples, 12.01%)</title><rect x="52.6084%" y="357" width="12.0050%" height="15" fill="rgb(233,201,37)" fg:x="837" fg:w="191"/><text x="52.8584%" y="367.50">libsystem_malloc.d..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (191 samples, 12.01%)</title><rect x="52.6084%" y="341" width="12.0050%" height="15" fill="rgb(221,78,26)" fg:x="837" fg:w="191"/><text x="52.8584%" y="351.50">libsystem_malloc.d..</text></g><g><title>libsystem_kernel.dylib`madvise (190 samples, 11.94%)</title><rect x="52.6713%" y="325" width="11.9422%" height="15" fill="rgb(250,127,30)" fg:x="838" fg:w="190"/><text x="52.9213%" y="335.50">libsystem_kernel.d..</text></g><g><title>libsystem_platform.dylib`__bzero (8 samples, 0.50%)</title><rect x="64.6135%" y="357" width="0.5028%" height="15" fill="rgb(230,49,44)" fg:x="1028" fg:w="8"/><text x="64.8635%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (126 samples, 7.92%)</title><rect x="65.1163%" y="357" width="7.9195%" height="15" fill="rgb(229,67,23)" fg:x="1036" fg:w="126"/><text x="65.3663%" y="367.50">libsystem_p..</text></g><g><title>spreadsheet`__rdl_dealloc (3 samples, 0.19%)</title><rect x="73.0358%" y="357" width="0.1886%" height="15" fill="rgb(249,83,47)" fg:x="1162" fg:w="3"/><text x="73.2858%" y="367.50"></text></g><g><title>spreadsheet`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;cop::spreadsheet::Spreadsheet&gt;&gt; (839 samples, 52.73%)</title><rect x="44.6260%" y="373" width="52.7341%" height="15" fill="rgb(215,43,3)" fg:x="710" fg:w="839"/><text x="44.8760%" y="383.50">spreadsheet`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;cop::spreadsheet::Spreadsheet&gt;&gt;</text></g><g><title>spreadsheet`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;cop::cell::Cell&gt;&gt;&gt; (384 samples, 24.14%)</title><rect x="73.2244%" y="357" width="24.1358%" height="15" fill="rgb(238,154,13)" fg:x="1165" fg:w="384"/><text x="73.4744%" y="367.50">spreadsheet`core::ptr::drop_in_place&lt;c..</text></g><g><title>dyld`start (1,566 samples, 98.43%)</title><rect x="0.0000%" y="469" width="98.4287%" height="15" fill="rgb(219,56,2)" fg:x="0" fg:w="1566"/><text x="0.2500%" y="479.50">dyld`start</text></g><g><title>spreadsheet`main (1,566 samples, 98.43%)</title><rect x="0.0000%" y="453" width="98.4287%" height="15" fill="rgb(233,0,4)" fg:x="0" fg:w="1566"/><text x="0.2500%" y="463.50">spreadsheet`main</text></g><g><title>spreadsheet`std::rt::lang_start_internal (1,566 samples, 98.43%)</title><rect x="0.0000%" y="437" width="98.4287%" height="15" fill="rgb(235,30,7)" fg:x="0" fg:w="1566"/><text x="0.2500%" y="447.50">spreadsheet`std::rt::lang_start_internal</text></g><g><title>spreadsheet`std::rt::lang_start::_{{closure}} (1,566 samples, 98.43%)</title><rect x="0.0000%" y="421" width="98.4287%" height="15" fill="rgb(250,79,13)" fg:x="0" fg:w="1566"/><text x="0.2500%" y="431.50">spreadsheet`std::rt::lang_start::_{{closure}}</text></g><g><title>spreadsheet`std::sys::backtrace::__rust_begin_short_backtrace (1,566 samples, 98.43%)</title><rect x="0.0000%" y="405" width="98.4287%" height="15" fill="rgb(211,146,34)" fg:x="0" fg:w="1566"/><text x="0.2500%" y="415.50">spreadsheet`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>spreadsheet`spreadsheet::main (1,566 samples, 98.43%)</title><rect x="0.0000%" y="389" width="98.4287%" height="15" fill="rgb(228,22,38)" fg:x="0" fg:w="1566"/><text x="0.2500%" y="399.50">spreadsheet`spreadsheet::main</text></g><g><title>spreadsheet`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;cop::cell::Cell&gt;&gt;&gt; (17 samples, 1.07%)</title><rect x="97.3602%" y="373" width="1.0685%" height="15" fill="rgb(235,168,5)" fg:x="1549" fg:w="17"/><text x="97.6102%" y="383.50"></text></g><g><title>all (1,591 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(221,155,16)" fg:x="0" fg:w="1591"/><text x="0.2500%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__exit (25 samples, 1.57%)</title><rect x="98.4287%" y="469" width="1.5713%" height="15" fill="rgb(215,215,53)" fg:x="1566" fg:w="25"/><text x="98.6787%" y="479.50"></text></g></svg></svg>